/**
 * 
 */
package search_trees_structures;

import java.util.Comparator;

import heaps_priority_queues.Entry;
import list_abstractions.Position;

/**
 * @author Lau Sandt
 *
 */
public class AVLTreeMap<K, V> extends TreeMap<K,V> {
	
	/** constructs an empty map using the natural ordering of keys */
	public AVLTreeMap() { super(); }
	
	/** constructs an empty map using given Comparator for the ordering of keys */
	public AVLTreeMap(Comparator<K> comp) { super(comp); }
	
	/** returns the height of the given tree position */
	protected int height(Position<Entry<K,V>> p) { return tree.getAux(p); }
	
	/** Recomputes height of the given position p based on the height of the children of p */
	protected void recomputeHeight(Position<Entry<K,V>> p) {
		tree.setAux(p, Math.max(height(left(p)), height(right(p))));
	}
	
	/** Returns the taller child of p  
	 * if none is taller then returns the left child of p iff p is the left child
	 * otherwise returns the right
	 */
	protected Position<Entry<K,V>> tallerChild(Position<Entry<K,V>> p){
		if (height(left(p)) > height(right(p)) ) return left(p);
		if (height(left(p)) < height(right(p)) ) return right(p);
		if (isRoot(p)) return left(p); 								// choice is irrelevant
		if (p == left(parent(p))) return left(p);
		else return right(p);
	}
	
	/**
	 * Utility used to rebalance after an insert or removal operation
	 * path upward from p, performing trinode restructuring when imbalance is found
	 * continuing until the balance is restored
	 */
	protected void rebalance(Position<Entry<K,V>> p) {
		int oldHeight, newHeight;
		do {
			oldHeight = height(p); 
			if (!isBalanced(p)) {
				p = tree.restructure(tallerChild(tallerChild(p)));
				recomputeHeight(left(p));
				recomputeHeight(right(p));
			}
			recomputeHeight(p);
			newHeight = height(p);
			p = parent(p);
		} while (oldHeight != newHeight && p != null);
		
	}
	
	private boolean isBalanced(Position<Entry<K, V>> p) {
		return Math.abs(height(left(p)) - height(right(p))) <= 1;
	}

	/** Overrides the TreeMap rebalancing hook that is called after insertion */
	public void rebalanceInstert(Position<Entry<K,V>> p) {
		rebalance(p);
	}
	
	/** Overrides the TreeMap rebalancing hook that is called after deletion */
	public void rebalanceDelete(Position<Entry<K,V>> p) {
		if (!isRoot(p))
			rebalance(parent(p));
	}


}
