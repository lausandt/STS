/**
 * 
 */
package search_trees_structures;

import java.util.Comparator;

import heaps_priority_queues.Entry;
import list_abstractions.Position;

/**
 * is a binary search tree that creates efficiency due to splaying. 
 * 
 * Splaying is a move to root operation 
 * 
 * There are three splaying operations 
 * zig zig : the node x and it's parentt y are both left or both right children 
 *           we promote x to to be a parent of y, and y a parent of z 
 *           while maintaining the inorder relationship of the nodes in T
 * 
 * zig zag : one of x and y is a left child the other a right child.
 *           we promote x by making both y and z children of x
 *           while maintaining the inorder relationship of the nodes in T   
 *           
 * zig 	   : x doesn't have a grandparent. Then we perform a single rotation to promote x over y, by making y a child of x
 *           while maintaining the inorder relationship of the nodes in T   
 * 
 * When to splay:
 * 
 * When searching for a key k. If k is found we splay p. If the key is not found (we're in a leaf) we splay the parent of that leaf position
 * When inserting a key, we splay the newly inserted node where k gets inserted
 * When deleting a key k, we splay the parent of the removed node. 
 * 
 * a splaytree is O(log n)
 * 
 * @author Lau Sandt
 *
 */
public class SplayTreeMap<K, V> extends TreeMap<K,V> {
	
	/** constructs an empty map using the natural ordering of keys */
	public SplayTreeMap() { super(); }
	
	/** constructs an empty map using given Comparator for the ordering of keys */
	public SplayTreeMap(Comparator<K> comp) { super(comp); }
	
	private void splay(Position<Entry<K, V>> p) {
		while (!isRoot(p)) { 
			Position<Entry<K,V>> parent = parent(p);
			Position<Entry<K,V>> grand = parent(parent);
			if (grand == null) tree.rotate(p);							//zig case
			else if (parent == left(grand) == (p == left(parent))) {	// zig-zig case
				tree.rotate(parent); 	// move parent upward
				tree.rotate(p);			// move p upward
			} else {													// zig-zag case
				tree.rotate(p); 		// move p upward
				tree.rotate(p);			// move p upward again
			}
		}
		
	}
	// overide the various TreeBalancing hooks 
	protected void rebalanceAccess(Position<Entry<K,V>> p) {
		if (isExternal(p)) p = parent(p);
		if (p != null) splay(p);
	}
	
	protected void rebalanceInsert(Position<Entry<K,V>> p) { splay(p); }
	
	protected void rebalanceDelete(Position<Entry<K,V>> p) { if (!isRoot(p)) splay(parent(p));	}



}
